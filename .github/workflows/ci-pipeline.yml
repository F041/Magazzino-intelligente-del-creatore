name: Magazzino Creatore CI Pipeline

# Trigger: quando eseguire questo workflow
on:
  push:
    branches: [ main ] # Esegui su push al branch 'main'
  pull_request:
    branches: [ main ] # Esegui anche su Pull Request verso 'main'

jobs:
  lint-and-test: # Nome del primo job
    name: Lint and Basic Checks
    runs-on: ubuntu-latest # Esegui su una macchina virtuale Ubuntu fornita da GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Azione standard per scaricare il codice del repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Usa la stessa versione Python del tuo Dockerfile

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 # Aggiungi qui altre dipendenze di linting/test se necessario

      - name: Lint with flake8
        run: |
          # Ferma la build se ci sono errori Python o sintassi (E) o undefined names (F)
          # --count mostra il totale degli errori
          # --select=E,F seleziona solo certi tipi di errori (puoi espandere o rimuovere)
          # --show-source mostra la riga del codice con l'errore
          # --statistics mostra le statistiche degli errori
          # Puoi personalizzare i path da controllare (es. solo la cartella 'app')
          flake8 . --count --select=E,F --show-source --statistics
          # Per errori più permissivi o per ignorare certi errori, usa --ignore=E501,W292 ecc.
          # flake8 . --count --ignore=E501,W292 --show-source --statistics

  build-and-push-docker-image: # Nome del secondo job
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test # Questo job parte solo se 'lint-and-test' ha successo

    permissions: # Permessi necessari per pushare a GHCR
      contents: read
      packages: write # Permesso per scrivere pacchetti (immagini Docker) a GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Nome utente GitHub che ha triggerato l'azione
          password: ${{ secrets.GITHUB_TOKEN }} # Token speciale fornito da GitHub Actions

      - name: Set up Docker Buildx (per build multi-piattaforma, buona pratica)
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta # Dà un ID a questo step per riferirsi ai suoi output
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/magazzino-creatore # Nome immagine: ghcr.io/TUO_USERNAME/magazzino-creatore
          # Crea tag:
          # - 'latest' per il branch main
          # - il numero di run (es. 'run123')
          # - il commit SHA breve
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Contesto di build (la root del repo)
          file: ./Dockerfile # Path al Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Pusha solo se NON è un evento di pull_request (es. pusha su merge a main)
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Abilita caching dei layer Docker con GitHub Actions
          cache-to: type=gha,mode=max